// -------------------------------------------------------------
// 
// File Name: G:\AI\IIT BHU\codegen\hdllpf13\hdlsrc\hdllpf13_FixPt.v
// Created: 2016-05-24 16:42:08
// 
// Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// x_out                         ce_out        1
// y_out                         ce_out        1
// r_out                         ce_out        1
// g_out                         ce_out        1
// b_out                         ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: hdllpf13_FixPt
// Source Path: hdllpf13_FixPt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module hdllpf13_FixPt
          (
           clk,
           reset,
           clk_enable,
           x_in,
           y_in,
           r_in,
           g_in,
           b_in,
           ce_out,
           x_out,
           y_out,
           r_out,
           g_out,
           b_out
          );


  input   clk;
  input   reset;
  input   clk_enable;
  input   [9:0] x_in;  // ufix10
  input   [8:0] y_in;  // ufix9
  input   [8:0] r_in;  // ufix9
  input   [8:0] g_in;  // ufix9
  input   [8:0] b_in;  // ufix9
  output  ce_out;
  output  [9:0] x_out;  // ufix10
  output  [8:0] y_out;  // ufix9
  output  [13:0] r_out;  // ufix14_En7
  output  [13:0] g_out;  // ufix14_En7
  output  [13:0] b_out;  // ufix14_En7


  wire enb;
  wire [9:0] tmp;  // ufix10
  wire [9:0] x1;  // ufix10
  reg [9:0] x1_1;  // ufix10
  wire [9:0] tmp_1;  // ufix10
  wire [9:0] tmp_2;  // ufix10
  wire [9:0] x2;  // ufix10
  reg [9:0] x2_1;  // ufix10
  wire [9:0] tmp_3;  // ufix10
  wire [9:0] x_out_1;  // ufix10
  wire [9:0] x_out_2;  // ufix10
  wire [8:0] tmp_4;  // ufix9
  wire [8:0] y1;  // ufix9
  reg [8:0] y1_1;  // ufix9
  wire [8:0] tmp_5;  // ufix9
  wire [8:0] tmp_6;  // ufix9
  wire [8:0] y2;  // ufix9
  reg [8:0] y2_1;  // ufix9
  wire [8:0] tmp_7;  // ufix9
  wire [8:0] y_out_1;  // ufix9
  wire [8:0] y_out_2;  // ufix9
  wire [8:0] RGB [0:2];  // ufix9 [3]
  wire [24:0] c [0:2];  // ufix25_En17 [3]
  reg [24:0] c_1 [0:2];  // ufix25_En17 [3]
  wire [13:0] OrigImg_1 [0:2];  // ufix14_En7 [3]
  wire [13:0] r_out_1;  // ufix14_En7
  wire [13:0] r_out_2;  // ufix14_En7
  wire [13:0] g_out_1;  // ufix14_En7
  wire [13:0] g_out_2;  // ufix14_En7
  wire [13:0] b_out_1;  // ufix14_En7
  wire [13:0] b_out_2;  // ufix14_En7
  reg signed [31:0] p4_l_1;  // int32
  reg [24:0] p4_c_1 [0:2];  // ufix25_En17 [3]
  reg signed [31:0] p4_k_1;  // int32
  reg signed [31:0] p4_t_0_1;  // int32
  reg signed [31:0] p4_t_1_1;  // int32
  reg [25:0] p4_add_cast_1 [0:2];  // ufix26_En17 [3]
  reg [22:0] p4_mul_temp_1 [0:2];  // ufix23_En17 [3]
  reg [25:0] p4_add_cast_0_1 [0:2];  // ufix26_En17 [3]
  reg [25:0] p4_add_temp_1 [0:2];  // ufix26_En17 [3]


  assign tmp = x_in;



  assign x1 = tmp;



  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : x1_reg_process
      if (reset == 1'b1) begin
        x1_1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          x1_1 <= x1;
        end
      end
    end



  assign tmp_1 = x1_1;



  assign tmp_2 = tmp_1;



  assign x2 = tmp_2;



  always @(posedge clk or posedge reset)
    begin : x2_reg_process
      if (reset == 1'b1) begin
        x2_1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          x2_1 <= x2;
        end
      end
    end



  assign tmp_3 = x2_1;



  assign x_out_1 = tmp_3;



  assign x_out_2 = x_out_1;



  assign x_out = x_out_2;

  assign tmp_4 = y_in;



  assign y1 = tmp_4;



  always @(posedge clk or posedge reset)
    begin : y1_reg_process
      if (reset == 1'b1) begin
        y1_1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          y1_1 <= y1;
        end
      end
    end



  assign tmp_5 = y1_1;



  assign tmp_6 = tmp_5;



  assign y2 = tmp_6;



  always @(posedge clk or posedge reset)
    begin : y2_reg_process
      if (reset == 1'b1) begin
        y2_1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          y2_1 <= y2;
        end
      end
    end



  assign tmp_7 = y2_1;



  assign y_out_1 = tmp_7;



  assign y_out_2 = y_out_1;



  assign y_out = y_out_2;

  //spssa
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //                                                                          %
  //        Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2      %
  //                                                                          %
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  assign RGB[0] = r_in;
  assign RGB[1] = g_in;
  assign RGB[2] = b_in;



  assign c[0] = 25'b0000000000000000000000000;
  assign c[1] = 25'b0000000000000000000000000;
  assign c[2] = 25'b0000000000000000000000000;



  always @* begin

    for(p4_t_0_1 = 0; p4_t_0_1 <= 2; p4_t_0_1 = p4_t_0_1 + 1) begin
      p4_c_1[p4_t_0_1] = c[p4_t_0_1];
      c_1[p4_t_0_1] = c[p4_t_0_1];
    end


    for(p4_l_1 = 0; p4_l_1 <= 2; p4_l_1 = p4_l_1 + 1) begin

      for(p4_k_1 = 0; p4_k_1 <= 2; p4_k_1 = p4_k_1 + 1) begin
        p4_add_cast_1[p4_k_1] = p4_c_1[p4_l_1];
        p4_mul_temp_1[p4_k_1] = 14564 * RGB[p4_k_1];
        p4_add_cast_0_1[p4_k_1] = p4_mul_temp_1[p4_k_1];
        p4_add_temp_1[p4_k_1] = p4_add_cast_1[p4_k_1] + p4_add_cast_0_1[p4_k_1];
        p4_c_1[p4_l_1] = p4_add_temp_1[p4_k_1][24:0];
      end


      for(p4_t_1_1 = 0; p4_t_1_1 <= 2; p4_t_1_1 = p4_t_1_1 + 1) begin
        c_1[p4_t_1_1] = p4_c_1[p4_t_1_1];
      end

    end

  end



  assign OrigImg_1[0] = c_1[0][23:10];
  assign OrigImg_1[1] = c_1[1][23:10];
  assign OrigImg_1[2] = c_1[2][23:10];



  assign r_out_1 = OrigImg_1[0];



  assign r_out_2 = r_out_1;



  assign r_out = r_out_2;

  assign g_out_1 = OrigImg_1[1];



  assign g_out_2 = g_out_1;



  assign g_out = g_out_2;

  assign b_out_1 = OrigImg_1[2];



  assign b_out_2 = b_out_1;



  assign b_out = b_out_2;

  assign ce_out = clk_enable;

endmodule  // hdllpf13_FixPt

