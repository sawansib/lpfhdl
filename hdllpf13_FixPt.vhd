-- -------------------------------------------------------------
-- 
-- File Name: G:\AI\IIT BHU\codegen\hdllpf13\hdlsrc\hdllpf13_FixPt.vhd
-- Created: 2016-07-02 17:31:14
-- 
-- Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- x_out                         ce_out        1
-- y_out                         ce_out        1
-- r_out                         ce_out        1
-- g_out                         ce_out        1
-- b_out                         ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: hdllpf13_FixPt
-- Source Path: hdllpf13_FixPt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.hdllpf13_FixPt_pkg.ALL;

ENTITY hdllpf13_FixPt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        x_in                              :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
        y_in                              :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        r_in                              :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        g_in                              :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        b_in                              :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        ce_out                            :   OUT   std_logic;
        x_out                             :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        y_out                             :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
        r_out                             :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14_En7
        g_out                             :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14_En7
        b_out                             :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En7
        );
END hdllpf13_FixPt;


ARCHITECTURE rtl OF hdllpf13_FixPt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL x_in_unsigned                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp                              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL x1                               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL x1_1                             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_1                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_2                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL x2                               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL x2_1                             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_3                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL x_out_1                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL x_out_2                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL y_in_unsigned                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_4                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL y1                               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL y1_1                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_5                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_6                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL y2                               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL y2_1                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_7                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL y_out_1                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL y_out_2                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL r_in_unsigned                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL g_in_unsigned                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL b_in_unsigned                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL RGB                              : vector_of_unsigned9(0 TO 2);  -- ufix9 [3]
  SIGNAL c                                : vector_of_unsigned25(0 TO 2);  -- ufix25_En17 [3]
  SIGNAL c_1                              : vector_of_unsigned25(0 TO 2);  -- ufix25_En17 [3]
  SIGNAL OrigImg_1                        : vector_of_unsigned14(0 TO 2);  -- ufix14_En7 [3]
  SIGNAL r_out_1                          : unsigned(13 DOWNTO 0);  -- ufix14_En7
  SIGNAL r_out_2                          : unsigned(13 DOWNTO 0);  -- ufix14_En7
  SIGNAL g_out_1                          : unsigned(13 DOWNTO 0);  -- ufix14_En7
  SIGNAL g_out_2                          : unsigned(13 DOWNTO 0);  -- ufix14_En7
  SIGNAL b_out_1                          : unsigned(13 DOWNTO 0);  -- ufix14_En7
  SIGNAL b_out_2                          : unsigned(13 DOWNTO 0);  -- ufix14_En7

BEGIN
  x_in_unsigned <= unsigned(x_in);

  tmp <= x_in_unsigned;

  x1 <= tmp;

  enb <= clk_enable;

  x1_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x1_1 <= to_unsigned(0, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x1_1 <= x1;
      END IF;
    END IF;
  END PROCESS x1_reg_process;


  tmp_1 <= x1_1;

  tmp_2 <= tmp_1;

  x2 <= tmp_2;

  x2_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x2_1 <= to_unsigned(0, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x2_1 <= x2;
      END IF;
    END IF;
  END PROCESS x2_reg_process;


  tmp_3 <= x2_1;

  x_out_1 <= tmp_3;

  x_out_2 <= x_out_1;

  x_out <= std_logic_vector(x_out_2);

  y_in_unsigned <= unsigned(y_in);

  tmp_4 <= y_in_unsigned;

  y1 <= tmp_4;

  y1_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y1_1 <= to_unsigned(0, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y1_1 <= y1;
      END IF;
    END IF;
  END PROCESS y1_reg_process;


  tmp_5 <= y1_1;

  tmp_6 <= tmp_5;

  y2 <= tmp_6;

  y2_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y2_1 <= to_unsigned(0, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y2_1 <= y2;
      END IF;
    END IF;
  END PROCESS y2_reg_process;


  tmp_7 <= y2_1;

  y_out_1 <= tmp_7;

  y_out_2 <= y_out_1;

  y_out <= std_logic_vector(y_out_2);

  r_in_unsigned <= unsigned(r_in);

  g_in_unsigned <= unsigned(g_in);

  b_in_unsigned <= unsigned(b_in);

  --spssa
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --        Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2      %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  RGB(0) <= r_in_unsigned;
  RGB(1) <= g_in_unsigned;
  RGB(2) <= b_in_unsigned;

  c <= (OTHERS => to_unsigned(0, 25));

  p4_output : PROCESS (RGB, c)
    VARIABLE c1 : vector_of_unsigned25(0 TO 2);
    VARIABLE add_cast : vector_of_unsigned26(0 TO 2);
    VARIABLE mul_temp : vector_of_unsigned23(0 TO 2);
    VARIABLE add_cast_0 : vector_of_unsigned26(0 TO 2);
    VARIABLE add_temp : vector_of_unsigned26(0 TO 2);
  BEGIN
    c1 := c;
    c_1 <= c;

    FOR l IN 0 TO 2 LOOP

      FOR k IN 0 TO 2 LOOP
        add_cast(k) := resize(c1(l), 26);
        mul_temp(k) := to_unsigned(14564, 14) * RGB(k);
        add_cast_0(k) := resize(mul_temp(k), 26);
        add_temp(k) := add_cast(k) + add_cast_0(k);
        c1(l) := add_temp(k)(24 DOWNTO 0);
      END LOOP;

      c_1 <= c1;
    END LOOP;

  END PROCESS p4_output;



  OrigImg_1_gen: FOR t_0 IN 0 TO 2 GENERATE
    OrigImg_1(t_0) <= c_1(t_0)(23 DOWNTO 10);
  END GENERATE OrigImg_1_gen;


  r_out_1 <= OrigImg_1(0);

  r_out_2 <= r_out_1;

  r_out <= std_logic_vector(r_out_2);

  g_out_1 <= OrigImg_1(1);

  g_out_2 <= g_out_1;

  g_out <= std_logic_vector(g_out_2);

  b_out_1 <= OrigImg_1(2);

  b_out_2 <= b_out_1;

  b_out <= std_logic_vector(b_out_2);

  ce_out <= clk_enable;

END rtl;

